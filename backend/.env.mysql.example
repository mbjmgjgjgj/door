# The URL where the frontend will be served from
FRONTEND_URL="http://localhost:3000"

# The URL where the backend will be served from
# Note that the FRONTEND_URL and BACKEND_URL can
# and should be the same and should be, the ability
# to have individual URLs is mostly for testing with
# different ports locally.
BACKEND_URL="http://localhost:5000"

# Port the backend API will listen to
# Change this if port 5000 is already occupied
PORT=5000

# Use a strong (randomly) generated MySQL password
MYSQL_PASSWORD="replace-this-with-something-secure"

# Change to use another timezone
TZ="Europe/Stockholm"

# Follow the instructions here https://developers.google.com/identity/sign-in/web/sign-in
# When you have created the OAuth Client, fill in the client ID and secret.
# Add <whatever you have as your BACKEND_URL>/api/auth/login/callback as authorized redirect URI
GOOGLE_CLIENT_ID=""
GOOGLE_CLIENT_SECRET=""

# Custom MySQL
# Only uncomment this if you are not planning on using the premade
# docker-compose.prod.mysql.yml.
#
# MYSQL_HOST=""     # use `host.machine` and the app will use the internal IP of host machine
#                   # (e.g. any MySQL instance running on the Docker host itself)
# MYSQL_DATABASE="" # overrides default remote_door_lock
# MYSQL_USER=""     # overrides default remote_door_lock
# REDIS_HOST=""     # overrides using default Redis instance

# Development and testing
#
# OAUTHLIB_INSECURE_TRANSPORT=1 # OAuthLib does not run with HTTP. Using 1 here overrides this.
# INSECURE="true"               # Enforces lazy CORS policy and cookie settings. Only local dev!
